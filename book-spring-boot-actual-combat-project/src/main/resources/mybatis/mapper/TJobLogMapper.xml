<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.learning.spring.boot.mapper.TJobLogMapper">
  <resultMap id="BaseResultMap" type="com.learning.spring.boot.domain.entity.TJobLog">
    <id column="LOG_ID" jdbcType="BIGINT" property="logId" />
    <result column="JOB_ID" jdbcType="BIGINT" property="jobId" />
    <result column="BEAN_NAME" jdbcType="VARCHAR" property="beanName" />
    <result column="METHOD_NAME" jdbcType="VARCHAR" property="methodName" />
    <result column="PARAMS" jdbcType="VARCHAR" property="params" />
    <result column="STATUS" jdbcType="CHAR" property="status" />
    <result column="TIMES" jdbcType="DECIMAL" property="times" />
    <result column="CREATE_TIME" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.learning.spring.boot.domain.entity.TJobLog">
    <result column="ERROR" jdbcType="LONGVARCHAR" property="error" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    LOG_ID, JOB_ID, BEAN_NAME, METHOD_NAME, PARAMS, `STATUS`, TIMES, CREATE_TIME
  </sql>
  <sql id="Blob_Column_List">
    ERROR
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.learning.spring.boot.domain.entity.TJobLogExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_job_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByExample" parameterType="com.learning.spring.boot.domain.entity.TJobLogExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_job_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_job_log
    where LOG_ID = #{logId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from t_job_log
    where LOG_ID = #{logId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.learning.spring.boot.domain.entity.TJobLogExample">
    delete from t_job_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.learning.spring.boot.domain.entity.TJobLog">
    insert into t_job_log (LOG_ID, JOB_ID, BEAN_NAME, 
      METHOD_NAME, PARAMS, `STATUS`, 
      TIMES, CREATE_TIME, ERROR
      )
    values (#{logId,jdbcType=BIGINT}, #{jobId,jdbcType=BIGINT}, #{beanName,jdbcType=VARCHAR}, 
      #{methodName,jdbcType=VARCHAR}, #{params,jdbcType=VARCHAR}, #{status,jdbcType=CHAR}, 
      #{times,jdbcType=DECIMAL}, #{createTime,jdbcType=TIMESTAMP}, #{error,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.learning.spring.boot.domain.entity.TJobLog">
    insert into t_job_log
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="logId != null">
        LOG_ID,
      </if>
      <if test="jobId != null">
        JOB_ID,
      </if>
      <if test="beanName != null">
        BEAN_NAME,
      </if>
      <if test="methodName != null">
        METHOD_NAME,
      </if>
      <if test="params != null">
        PARAMS,
      </if>
      <if test="status != null">
        `STATUS`,
      </if>
      <if test="times != null">
        TIMES,
      </if>
      <if test="createTime != null">
        CREATE_TIME,
      </if>
      <if test="error != null">
        ERROR,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="logId != null">
        #{logId,jdbcType=BIGINT},
      </if>
      <if test="jobId != null">
        #{jobId,jdbcType=BIGINT},
      </if>
      <if test="beanName != null">
        #{beanName,jdbcType=VARCHAR},
      </if>
      <if test="methodName != null">
        #{methodName,jdbcType=VARCHAR},
      </if>
      <if test="params != null">
        #{params,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=CHAR},
      </if>
      <if test="times != null">
        #{times,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="error != null">
        #{error,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.learning.spring.boot.domain.entity.TJobLogExample" resultType="java.lang.Long">
    select count(*) from t_job_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update t_job_log
    <set>
      <if test="record.logId != null">
        LOG_ID = #{record.logId,jdbcType=BIGINT},
      </if>
      <if test="record.jobId != null">
        JOB_ID = #{record.jobId,jdbcType=BIGINT},
      </if>
      <if test="record.beanName != null">
        BEAN_NAME = #{record.beanName,jdbcType=VARCHAR},
      </if>
      <if test="record.methodName != null">
        METHOD_NAME = #{record.methodName,jdbcType=VARCHAR},
      </if>
      <if test="record.params != null">
        PARAMS = #{record.params,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        `STATUS` = #{record.status,jdbcType=CHAR},
      </if>
      <if test="record.times != null">
        TIMES = #{record.times,jdbcType=DECIMAL},
      </if>
      <if test="record.createTime != null">
        CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.error != null">
        ERROR = #{record.error,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update t_job_log
    set LOG_ID = #{record.logId,jdbcType=BIGINT},
      JOB_ID = #{record.jobId,jdbcType=BIGINT},
      BEAN_NAME = #{record.beanName,jdbcType=VARCHAR},
      METHOD_NAME = #{record.methodName,jdbcType=VARCHAR},
      PARAMS = #{record.params,jdbcType=VARCHAR},
      `STATUS` = #{record.status,jdbcType=CHAR},
      TIMES = #{record.times,jdbcType=DECIMAL},
      CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      ERROR = #{record.error,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update t_job_log
    set LOG_ID = #{record.logId,jdbcType=BIGINT},
      JOB_ID = #{record.jobId,jdbcType=BIGINT},
      BEAN_NAME = #{record.beanName,jdbcType=VARCHAR},
      METHOD_NAME = #{record.methodName,jdbcType=VARCHAR},
      PARAMS = #{record.params,jdbcType=VARCHAR},
      `STATUS` = #{record.status,jdbcType=CHAR},
      TIMES = #{record.times,jdbcType=DECIMAL},
      CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.learning.spring.boot.domain.entity.TJobLog">
    update t_job_log
    <set>
      <if test="jobId != null">
        JOB_ID = #{jobId,jdbcType=BIGINT},
      </if>
      <if test="beanName != null">
        BEAN_NAME = #{beanName,jdbcType=VARCHAR},
      </if>
      <if test="methodName != null">
        METHOD_NAME = #{methodName,jdbcType=VARCHAR},
      </if>
      <if test="params != null">
        PARAMS = #{params,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        `STATUS` = #{status,jdbcType=CHAR},
      </if>
      <if test="times != null">
        TIMES = #{times,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null">
        CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="error != null">
        ERROR = #{error,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where LOG_ID = #{logId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.learning.spring.boot.domain.entity.TJobLog">
    update t_job_log
    set JOB_ID = #{jobId,jdbcType=BIGINT},
      BEAN_NAME = #{beanName,jdbcType=VARCHAR},
      METHOD_NAME = #{methodName,jdbcType=VARCHAR},
      PARAMS = #{params,jdbcType=VARCHAR},
      `STATUS` = #{status,jdbcType=CHAR},
      TIMES = #{times,jdbcType=DECIMAL},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      ERROR = #{error,jdbcType=LONGVARCHAR}
    where LOG_ID = #{logId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.learning.spring.boot.domain.entity.TJobLog">
    update t_job_log
    set JOB_ID = #{jobId,jdbcType=BIGINT},
      BEAN_NAME = #{beanName,jdbcType=VARCHAR},
      METHOD_NAME = #{methodName,jdbcType=VARCHAR},
      PARAMS = #{params,jdbcType=VARCHAR},
      `STATUS` = #{status,jdbcType=CHAR},
      TIMES = #{times,jdbcType=DECIMAL},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP}
    where LOG_ID = #{logId,jdbcType=BIGINT}
  </update>
</mapper>